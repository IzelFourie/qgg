dfe <- n + dfe0 - 2
sigma2 <- sce/rchisq(n=1, df=dfe, ncp=0)
return(list(e=e, mu=mu,b=b,sigma2=sigma2,g=g, g0=g0, g1=g1))
}
################################################################################
# Simulate data and test SSVS function
################################################################################
# simulated data set
X <- matrix(rnorm(10000000),nrow=1000)
set1 <- sample(1:ncol(X),5)
set2 <- sample(1:ncol(X),5)
set1a <- unique(c(set1,sample(1:ncol(X),100)))
set2a <- unique(c(set2,sample(1:ncol(X),100)))
set3 <- (1:ncol(X))[-unique(c(set1a,set2a))]
y <- rowSums(X[,set1]) + rowSums(X[,set2]) + rnorm(nrow(X),mean=0,sd=1)
varE <- var( y - rowSums(X[,set1]) - rowSums(X[,set2]) )
varE
h2 <- ( var(rowSums(X[,set1])) + var(rowSums(X[,set2])) )/var(y)
h2
set <- list(set1=set1a,set2=set2a,set3=set3)
res <- hssvs(y=y,X=X,set=set, p1=0.01,g0=0.0000001, nsamp=100)
bgL <- function(y=NULL, X=NULL, g=NULL, nsamp=100, hgprior=list(sce0=0.001, scg0=0.001, dfe0=4, dfg0=4)) {
n <- length(y)           # number of observations
nb <- ncol(X)            # number of regression variables
ng <- length(unique(g))  # number of groups
dxx <- colSums(X**2)     # diagonal elements of the X'X matrix
b <- rep(0,nb)                           # initialize b
mu <- 0                                  # initilaize mu
sigma <- 1                               # initialize sigma
g1 <- rep(1/nb,ng)                     # initialize slab variance
g1 <- rep(0,ng)                     # initialize slab variance
for ( j in 1:ng ){
g1[j] <- 1/sum(g==j)
}
print(g1)
#g1 <- c(1,0.000001)                     # initialize slab variance
sce0 <- hgprior$sce0                     # prior residual sums of squares
scg0 <- hgprior$scg0                     # prior slab residual sums of squares
dfe0 <- hgprior$dfe0                     # prior residual degrees of freedom
dfg0 <- hgprior$dfg0                     # prior slab residual degrees of freedom
e <- as.vector(y - mu - X%*%b)           # initialize residuals
for ( i in 1:nsamp ) {
# sample mu and update residuals
mu0 <- mu
mu <- rnorm(1,mean=mean(e+mu0),sd=sigma/n)
e <- e - mu + mu0
# sample b and update residuals
b0 <- b
shrinkage <- rep(0,times=nb)
for ( j in 1:ng ){
shrinkage[g==j] <- sigma/g1[j]
}
xxs <- dxx + shrinkage
for ( j in 1:nb){
rhs <- sum(X[,j]*e) + dxx[j]*b0[j]
b[j] <- rnorm(1,mean=rhs/xxs[j],sd=sigma/xxs[j])
e  <- e - X[,j]*(b[j] - b0[j])
}
# sample sigma
sce <- sum(e**2) + sce0
dfe <- n + dfe0 - 2
sigma <- sce/rchisq(n=1, df=dfe, ncp=0)
#sigma <- sum(e**2)/rchisq(n=1, df=n-2, ncp=0)
# sample g1
for ( j in 1:ng){
scg1 <- sum((b**2)[g==j]) + scg0
dfg1 <- sum(g==j) + dfg0 - 2
g1[j] <- scg1/rchisq(n=1, df=dfg1, ncp=0)
}
# sample g
print("")
print(c("round",i, (1:nb)[g==1]))
print(c("round",i, c(mu,sigma,g1)))
print(c("round",i, b[g==1]))
}
}
################################################################################
# Simulate data and test SSVS functions
################################################################################
#library(BLR)
#data(wheat)
#
#res1 <- ssvs(y=Y[,1],X=X,p1=0.01,g0=0.0000001, nsamp=100)
#res2 <- ssvs(y=Y[,2],X=X,p1=0.01,g0=0.0000001, nsamp=100)
#res4 <- ssvs(y=Y[,3],X=X,p1=0.01,g0=0.0000001, nsamp=100)
#res5 <- ssvs(y=Y[,4],X=X,p1=0.01,g0=0.0000001, nsamp=100)
# simulated data set
X <- matrix(rnorm(10000000),nrow=1000)
set1 <- sample(1:ncol(X),50)
set2 <- sample(1:ncol(X),50)
set3 <- sample(1:ncol(X),50)
set4 <- sample(1:ncol(X),50)
set5 <- sample(1:ncol(X),50)
g <- rep(6,times=ncol(X))
g[set1] <- 1
g[set2] <- 2
g[set3] <- 3
g[set4] <- 4
g[set5] <- 5
set <- unique(c(set1,set2,set3,set4,set5))
y <- rowSums(X[,set]) + rnorm(nrow(X),mean=0,sd=20)
system.time( res <- bgL(y=y,X=X,g=g, nsamp=10) )
rm(list=ls(all=TRUE))
mcbr <- function(y=NULL, X=NULL, nc=NULL, l1=NULL, l2=NULL, phi=NULL, nsamp=100 ) {
n <- length(y)             # number of observations
p <- ncol(X)               # number of regression variables
dxx <- colSums(X**2)       # diagonal elements of the X'X matrix
b <- as.numeric(rep(0,p))  # initialize b
mu <- 0                    # initilaize mu
if (is.null(l1))  l1 <- 1/(10**((1:nc)-4))                       # prior shape parameter lambda
if (is.null(l2))  l2 <- rep(1/10**2,nc)                          # prior rate parameter lambda
if (is.null(phi)) phi0 <- c(0.5,0.25,0.15,0.05,0.025,0.01,0.001)  # prior phi
phi <- phi0
logphi <- log(phi)                                               # prior phi on the log scale
lambdak <- rep(1000,nc)                             # initialize lambdak one for each class
lambda <- rep(1000,p)                               # initialize lambda one for each regressor
g <- rep(1,p)                                       # initialize class indicator variable
cors <- abs(cor(y, X))
quants <- quantile(cors, probs=1-phi)
for ( i in 1:nc) {
#  g[cors>quants[i]] <- i
}
e <- as.vector(y - mu - X%*%b)     # initialize residuals
sigma2 <- var(e)/2                 # initialize sigma2
for ( i in 1:nsamp ) {
# sample mu and update residuals
muC <- mu
mu <- rnorm(1,mean=mean(e+muC),sd=sigma2/n)
e <- as.vector(e - mu + muC)
# sample b and update residuals
bC <- b
xxs <- as.numeric(dxx + lambda*sigma2)
for ( j in 1:p){
rhs <- as.numeric(sum(X[,j]*e) + dxx[j]*bC[j])
b[j] <- rnorm(1,mean=rhs/xxs[j],sd=sigma2/(xxs[j]))
e  <- as.numeric(e - X[,j]*(b[j] - bC[j]))
}
e <- as.numeric(y - mu - X%*%b)                     # update residuals
# sample lambda
b2 <- b**2
l1k <- l1
l2k <- l2
for ( k in 1:nc ) {
if(sum(g==k)>0) l1k[k] <- l1k[k] + sum(g==k)/2
if(sum(g==k)>0) l2k[k] <- l2k[k] + sum(b2[g==k])/2
lambdak[k] <- rgamma( n=1, shape=l1k[k], rate=l2k[k])
if(sum(g==k)>0) lambda[g==k] <- lambdak[k]
}
loglambdak <- log(lambdak)
# sample gamma
for ( j in 1:p ) {
probs <- -0.5*b2[j]*lambdak + logphi + 0.5*loglambdak
g[j] <- (1:nc)[rmultinom(1,1,prob=exp(probs))==1]
}
# sample phi
#phi <- rep(0.0001,nc)
rws <- as.numeric(names(table(g)))
#phi[rws] <- table(g)/p
print(c(i,phi))
# sample sigma
she <- n
sce <- sum(e**2)
sigma2 <- sce/rchisq(n=1,df=she)
plot(b)
print(table(g))
print(c(mu,sigma2))
}
}
# Simulate data and test function
X <- matrix(rnorm(10000000),nrow=1000)
set <- sample(1:ncol(X),10)
y <- rowSums(X[,set]) + rnorm(nrow(X),mean=0,sd=1)
h2 <- var(rowSums(X[,set]))/var(y)
mcbr(y=y, X=X, nc=7)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- reml(fm=fm,W=W,sets=list(colnames(W)),data=data)
# Sum set test
sets <- list(A=as.character(1:100),B=as.character(101:1000),C=as.character(1001:5000),D=as.character(5001:10000))
res <- setTest(stat=fit$s**2,sets=sets,nperm=100)
res <- setTest(stat=abs((fit$s/fit$s)),sets=sets,nperm=100)
res
res <- setTest(stat=fit$s**2,sets=sets,nperm=100)
res
library(qgg)
res <- setTest(stat=abs((fit$s/fit$vs)),sets=sets,nperm=100)
res
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- reml(fm=fm,W=W,sets=list(colnames(W)),data=data)
# CVS set test
sets <- list(A=as.character(1:100),B=as.character(101:1000),C=as.character(1001:5000),D=as.character(5001:10000))
res <- cvsTest(s=fit$s,g=fit$f,W=W,sets=sets,nperm=100)
res
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses and cross validation
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
setsGB <- list(A=colnames(W))
setsGF <- list(C1=colnames(W)[1:1000],C2=colnames(W)[1001:2000],C2=colnames(W)[2000:10000])
setsGT <- list(C1=colnames(W)[1:10],C2=colnames(W)[1001:1010],C2=colnames(W)[1:10000])
n <- length(y)
fold <- 10
validate <- replicate(nsets,sample(1:n,as.integer(n/fold)
fitGB <- reml(fm=fm,W=W,sets=setsGB,data=data,validate=validate)
fitGF <- reml(fm=fm,W=W,sets=setsGF,data=data,validate=validate)
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data,validate=validate)
validClust <- list(C1=1:40,C2=41:77)
fitGB <- reml(fm=fm,W=W,sets=setsGB,data=data,validate=validClust)
fitGF <- reml(fm=fm,W=W,sets=setsGF,data=data,validate=validClust)
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data,validate=validClust)
# REML analyses and variance decomposition
fitGB <- reml(fm=fm,W=W,data=data)
covSets(W=W,g=fitGB$f,sets=setsGF)$cvf
covSets(W=W,g=fitGB$f,sets=setsGT)$cvf
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data)
covSets(W=W,g=fitGT$f[,1],sets=setsGT)$cvf
covSets(W=W,g=fitGT$f[,2],sets=setsGT)$cvf
cvgf1 <- covSets(W=W,g=fitGT$f[,1],sets=setsGT, level2=TRUE)
cvgf2 <- covSets(W=W,g=fitGT$f[,2],sets=setsGT, level2=TRUE)
bars1 <- cvgf1$cvf[,2]
bars11 <- cvgf1$cvfSet[[1]][,5]
bars12 <- cvgf1$cvfSet[[2]][,5]
bars2 <- cvgf2$cvf[,2]
bars21 <- cvgf2$cvfSet[[1]][,5]
bars22 <- cvgf2$cvfSet[[2]][,5]
layout(matrix(1:6,ncol=2,byrow=TRUE))
barplot(bars1)
barplot(bars2)
barplot(bars11)
barplot(bars12)
barplot(bars21)
barplot(bars22)
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- reml(fm=fm,W=W,sets=list(colnames(W)),data=data)
# REML analyses
pc1 <- rnorm(200)
pc2 <- rnorm(200)
f1 <- factor(rep(1:2,100))
fmf <- y~pc1+pc1+f1
fitGB <- reml(fm=fmf,W=W,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGF <- reml(fm=fmf,W=W,sets=setsGF,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGT <- reml(fm=fmf,W=W,sets=setsGT,data=data.frame(y,pc1,pc1,f1),validate=validate)
n <- length(y)
fold <- 10
validate <- replicate(nsets,sample(1:n,as.integer(n/fold)
)
)
validate
library(qgg)
n <- length(y)
fold <- 10
nsets <- 50
validate <- replicate(nsets,sample(1:n,as.integer(n/fold)))
validate
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses and cross validation
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
setsGB <- list(A=colnames(W))
setsGF <- list(C1=colnames(W)[1:1000],C2=colnames(W)[1001:2000],C2=colnames(W)[2000:10000])
setsGT <- list(C1=colnames(W)[1:10],C2=colnames(W)[1001:1010],C2=colnames(W)[1:10000])
n <- length(y)
fold <- 10
nsets <- 50
validate <- replicate(nsets,sample(1:n,as.integer(n/fold)))
fitGB <- reml(fm=fm,W=W,sets=setsGB,data=data,validate=validate)
fitGF <- reml(fm=fm,W=W,sets=setsGF,data=data,validate=validate)
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data,validate=validate)
validClust <- list(C1=1:40,C2=41:77)
fitGB <- reml(fm=fm,W=W,sets=setsGB,data=data,validate=validClust)
fitGF <- reml(fm=fm,W=W,sets=setsGF,data=data,validate=validClust)
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data,validate=validClust)
# REML analyses and variance decomposition
fitGB <- reml(fm=fm,W=W,data=data)
covSets(W=W,g=fitGB$f,sets=setsGF)$cvf
covSets(W=W,g=fitGB$f,sets=setsGT)$cvf
fitGT <- reml(fm=fm,W=W,sets=setsGT,data=data)
covSets(W=W,g=fitGT$f[,1],sets=setsGT)$cvf
covSets(W=W,g=fitGT$f[,2],sets=setsGT)$cvf
cvgf1 <- covSets(W=W,g=fitGT$f[,1],sets=setsGT, level2=TRUE)
cvgf2 <- covSets(W=W,g=fitGT$f[,2],sets=setsGT, level2=TRUE)
bars1 <- cvgf1$cvf[,2]
bars11 <- cvgf1$cvfSet[[1]][,5]
bars12 <- cvgf1$cvfSet[[2]][,5]
bars2 <- cvgf2$cvf[,2]
bars21 <- cvgf2$cvfSet[[1]][,5]
bars22 <- cvgf2$cvfSet[[2]][,5]
layout(matrix(1:6,ncol=2,byrow=TRUE))
barplot(bars1)
barplot(bars2)
barplot(bars11)
barplot(bars12)
barplot(bars21)
barplot(bars22)
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- reml(fm=fm,W=W,sets=list(colnames(W)),data=data)
# REML analyses
pc1 <- rnorm(200)
pc2 <- rnorm(200)
f1 <- factor(rep(1:2,100))
fmf <- y~pc1+pc1+f1
fitGB <- reml(fm=fmf,W=W,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGF <- reml(fm=fmf,W=W,sets=setsGF,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGT <- reml(fm=fmf,W=W,sets=setsGT,data=data.frame(y,pc1,pc1,f1),validate=validate)
49/0.6
library(qgg)
library(qgg)
10+0.2*30+40*0.4
48000*9
48000*9/12
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses and cross validation
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
setsGB <- list(A=colnames(W))
setsGF <- list(C1=colnames(W)[1:1000],C2=colnames(W)[1001:2000],C2=colnames(W)[2000:10000])
setsGT <- list(C1=colnames(W)[1:10],C2=colnames(W)[1001:1010],C2=colnames(W)[1:10000])
n <- length(y)
fold <- 10
nsets <- 50
validate <- replicate(nsets,sample(1:n,as.integer(n/fold)))
fitGB <- gfm(fm=fm,W=W,sets=setsGB,data=data,validate=validate)
fitGF <- gfm(fm=fm,W=W,sets=setsGF,data=data,validate=validate)
fitGT <- gfm(fm=fm,W=W,sets=setsGT,data=data,validate=validate)
validClust <- list(C1=1:40,C2=41:77)
fitGB <- gfm(fm=fm,W=W,sets=setsGB,data=data,validate=validClust)
fitGF <- gfm(fm=fm,W=W,sets=setsGF,data=data,validate=validClust)
fitGT <- gfm(fm=fm,W=W,sets=setsGT,data=data,validate=validClust)
# REML analyses and variance decomposition
fitGB <- gfm(fm=fm,W=W,data=data)
covSets(W=W,g=fitGB$f,sets=setsGF)$cvf
covSets(W=W,g=fitGB$f,sets=setsGT)$cvf
fitGT <- gfm(fm=fm,W=W,sets=setsGT,data=data)
covSets(W=W,g=fitGT$f[,1],sets=setsGT)$cvf
covSets(W=W,g=fitGT$f[,2],sets=setsGT)$cvf
cvgf1 <- covSets(W=W,g=fitGT$f[,1],sets=setsGT, level2=TRUE)
cvgf2 <- covSets(W=W,g=fitGT$f[,2],sets=setsGT, level2=TRUE)
bars1 <- cvgf1$cvf[,2]
bars11 <- cvgf1$cvfSet[[1]][,5]
bars12 <- cvgf1$cvfSet[[2]][,5]
bars2 <- cvgf2$cvf[,2]
bars21 <- cvgf2$cvfSet[[1]][,5]
bars22 <- cvgf2$cvfSet[[2]][,5]
layout(matrix(1:6,ncol=2,byrow=TRUE))
barplot(bars1)
barplot(bars2)
barplot(bars11)
barplot(bars12)
barplot(bars21)
barplot(bars22)
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- gfm(fm=fm,W=W,sets=list(colnames(W)),data=data)
# REML analyses
pc1 <- rnorm(200)
pc2 <- rnorm(200)
f1 <- factor(rep(1:2,100))
fmf <- y~pc1+pc1+f1
fitGB <- gfm(fm=fmf,W=W,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGF <- gfm(fm=fmf,W=W,sets=setsGF,data=data.frame(y,pc1,pc1,f1),validate=validate)
fitGT <- gfm(fm=fmf,W=W,sets=setsGT,data=data.frame(y,pc1,pc1,f1),validate=validate)
library(qgg)
?pt
library(qgg)
library(qgg)
library(qgg)
install.packages("testthat")
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
?pt
pt(10,10)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
# Simulate data
W <- matrix(rnorm(2000000),ncol=10000)
colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[,1:10]) + rowSums(W[,1001:1010]) + rnorm(nrow(W))
# REML analyses
data <- data.frame(y=y,mu=1)
fm <- y ~ mu
fit <- gfm(fm=fm,W=W,sets=list(colnames(W)),data=data)
fit$df <- 10
fit$p <- pt(fit$s/sqrt(fit$vs),df=fit$df, lower.tail=FALSE)
fit$p
min(fit$p)
sets <- list(A=as.character(1:100),B=as.character(101:1000),C=as.character(1001:5000),D=as.character(5001:10000))
# Set test based on sums
res <- setTest(stat=fit$s**2,sets=sets, method="sum", nperm=100)
res
# Set test based on cvs
res <- setTest(stat=fit$s,W=W, sets=sets,method="cvs", nperm=100)
res
# Set test based on hyperG
res <- setTest(stat=fit$p,sets=sets, method="hyperG", threshold=0.05)
res
library(qgg)
library(qgg)
library(qgg)
library(qgg)
library(qgg)
sets <- list(A=as.character(1:100),B=as.character(101:1000),C=as.character(1001:5000),D=as.character(5001:10000))
res <- cvsTest(s=fit$s,W=W,sets=sets,nperm=100)
res
library(qgg)
sets <- list(A=as.character(1:100),B=as.character(101:1000),C=as.character(1001:5000),D=as.character(5001:10000))
res <- cvsTest(s=fit$s,W=W,sets=sets,nperm=100)
res
?phyper
m <- 10; n <- 7; k <- 8
x <- 0:(k+1)
rbind(phyper(x, m, n, k), dhyper(x, m, n, k))
phyper(x, m, n, k)
library(qgg)
library(qgg)
