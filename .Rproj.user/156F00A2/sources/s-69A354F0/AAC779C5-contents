#########################################################################################
# Test GSQR
#########################################################################################

  #install.packages("devtools")
  library(devtools)
  install_github("psoerensen/qgg")


    library(qgg)

    # Simulate data
    m <- 1000
    n <- 2000
    W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
    W <- scale(W)
    colnames(W) <- as.character(1:ncol(W))
    rownames(W) <- as.character(1:nrow(W))
    causal <- sample(1:ncol(W),50)
    y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
    X <- model.matrix(y~1)

    validate <- replicate( 5, sample(1:n, as.integer(n/10)))
    
    lambda <- 50/(50/m)

    fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda, tol=1e-5)
    
    fitGS <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda)
    plotGS(fit=fitGS,sets=causal)

    fitGSw <- gsolve( y=y, X=X, W=W, msets=200, weights=TRUE, lambda=lambda)
    plotGS(fit=fitGSw,sets=causal)
    
    
    cvGSw <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, weights=TRUE,validate=validate )
    cvGS <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, validate=validate )
    
    
    G <- computeG(W=W)
    fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
    cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
    
    
    
    tmp <- qcreml(y,fitGB$g,G=G)
    tmp <- qcreml(y,fitGB$g,W=W)
    tmp <- qcreml(y,fitGS$g,W=W)
    tmp <- qcreml(y,fitGSw$g,W=W)
    
    
    
