library(qgg)
library(qgg)
library(qgg)
library(qgg)
37000*10000*8/1000000000
37000*10000*8/1000000000
?greml
library(qgg)
?greml
library(qgg)
library(qgg)
5*80
5*80/30
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
qrW <- qr(W[,1:10])
qr.R(qrW)
qrW <- qr.R(qrW)
t(qrW)%*%rqW
t(qrW)%*%qrW
qrW%*%t(qrW)
t(qrW)%*%qrW
30000*350000*8
10000*350000*8
30000*350000*8
30000*35000*8
30000*10000*8
30000*100000*8
100000*450000*8
100000*450000*4
100000*450000*4/1000000000
100000*450000*1/1000000000
400000**2
(400000**2)*4
((400000**2)*4)/1000000000
93000*400000*1/1000000000
93000*400000*8/1000000000
93000*330000*8/1000000000
100000*330000*8/1000000000
800000*330000*8/1000000000
800000*330000*8/1000000000/30
as.raw(1:4)
object.size(as.raw(1:4))
object.size(1:4
)
g <- object.size(1:1000)
g <- 1:1000
graw <- as.raw(1:1000)
graw <- as.raw(sample(0:2,1000))
graw <- as.raw(sample(0:2,1000, replace=TRUE)
)
g <- sample(0:2,1000, replace=TRUE)
g <- sample(0:2,100000, replace=TRUE)
object.size(g)
object.size(as.raw(g))
500000*100000
500000*100000/1000000000
450000*90000/1000000000
g <- sample(0:2,100000*1000, replace=TRUE)
graw <- system.time(as.raw(g))
system.time(graw <- as.raw(g))
system.time(graw2 <- as.double(graw))
object.size(graw)
object.size(graw2)
33*8
g <- sample(0:2,1000000*1000, replace=TRUE)
system.time(graw <- as.raw(g))
object.size(g)
object.size(g)/1000000000
object.size(graw)/1000000000
?readBin
1e-6 < 9e-7
9.15508441477188e-07
9.15508441477188e-07<1e-6
library(devtools)
install_github("psoerensen/qgg")
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
lambda <- 50/(50/m)
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda, tol=1e-5)
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
cvGB
install_github("psoerensen/qgg")
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
lambda <- 50/(50/m)
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda, tol=1e-5)
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
cvGB
#install.packages("devtools")
library(devtools)
install_github("psoerensen/qgg")
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
lambda <- 50/(50/m)
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda, tol=1e-5)
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
cvGB
install_github("psoerensen/qgg")
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
cvGB
install_github("psoerensen/qgg")
337000*30000*8
337000*30000*8/1000000000
337000*30000/1000000000
g <- sample(0:2,100000,replace = TRUE)
object.size(g)
g <- sample(0:2,337000*1000,replace = TRUE)
object.size(g)
object.size(as.raw(g))
337000*100000
337000*100000/1000000000
33700*1000000/1000000000
33700*100000/1000000000
33700*600000/1000000000
33700*500000/1000000000
as.raw(c(1,2,NA))
as.raw(c(1,2))
as.raw(c(1,2,0))
as.raw(c(1,2,0,3))
as.raw(c(1,2,0,3,80))
raw(c(1,2,0,3,80))
raw(10)
800/17
47*5
800000*337000/1000000000
800000*337000/1000000000/22
800000*337000/1000000000/800
1000*337000/1000000000
8*2000
8*2000+1200
?readBin
as.raw(1)
800000*337000/1000000000/800
?join
?seek
1
is.integer(1)
as.integer(1)
1.09*as.integer(1)
?sample
226/2
x <- sample(0:2,1000, replace=TRUE)
y <- rnorm(1000)
lm(y~x)
summary(lm(y~x))
summary(lm(y~(x+1))
)
summary(lm(y~(x+1)))
summary(lm(y~x))
scale(rnorm(1000))
as.vector(scale(rnorm(1000)))
?abline
0.4**2
0.6**2
0.7**2
0.65**2
0.64**2
0.65**2
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
lambda <- 50/(50/m)
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda, tol=1e-5)
fitGS <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
fitGSw <- gsolve( y=y, X=X, W=W, msets=200, weights=TRUE, lambda=lambda)
plotGS(fit=fitGSw,sets=causal)
cvGSw <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, weights=TRUE,validate=validate )
cvGS <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, validate=validate )
cvGS
cvGSw
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
cvGB
cvGS
cvGSw
cvGB
gsolve <- function( y=NULL, X=NULL, W=NULL, sets=NULL, msets=100, lambda=NULL, validate=NULL, weights=FALSE, method="gsru", maxit=500, tol=0.0000001) {
if(is.null(validate)) {
if(method=="gsru")  fit <- gsru(y=y, W=W, X=X, sets=sets, lambda=lambda, weights=weights, maxit=maxit, tol=tol)
if(method=="gsqr")  fit <- gsqr(y=y, W=W, X=X, sets=sets,msets=msets,lambda=lambda,weights=weights, maxit=maxit, tol=tol)
}
if(!is.null(validate)) {
n <- length(y)
pa <- mspe <- intercept <- slope <- r2 <- NULL
for ( k in 1:ncol(validate)) {
v <- validate[, k]
t <- (1:n)[-v]
if(method=="gsru")  fit <- gsru(y=y[t], X=as.matrix(X[t,]), W=W[t,], sets=sets, lambda=lambda, weights=weights, maxit=maxit, tol=tol)
if(method=="gsqr")  fit <- gsqr(y=y[t], X=as.matrix(X[t,]), W=W[t,], sets=sets, msets=msets, lambda=lambda, weights=weights, maxit=maxit, tol=tol)
yv <- y[v]
yvhat <- W[v,]%*%fit$s
if(!is.null(X)) yvhat <- yvhat + X[v,]%*%fit$b
r2 <- c(r2, summary(lm(yv ~ yvhat))$r.squared)
pa <- c(pa, cor(yvhat, yv))
mspe <- c(mspe, sum((yvhat - yv)^2)/length(yv))
intercept <- c(intercept, lm(yv ~ yvhat )$coef[1])
slope <- c(slope, lm(yv ~ yvhat)$coef[2])
}
res <- data.frame(Corr=pa, R2=r2, R2NAG=NA, AUC=NA, intercept, slope, MSPE=mspe)
fit <- res
}
return(fit)
}
cvGSw <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, weights=TRUE,validate=validate )
cvGS <- gsolve( y=y, X=X, W=W, msets=200, lambda=lambda, validate=validate )
cvGS
cvGB
library(devtools)
install_github("psoerensen/qgg")
