fitMA <- lma(y=y, X=X, W=W)
head(y)
head(as.matrix(y))
yobs <- y <- as.matrix(y)
nt <- ncol(y)
ones <- matrix(1,nrow=nrow(y),ncol=nt)
ones[is.na(y)] <- 0
y[is.na(y)] <- 0
y <- y[rownames(W),]
m <- ncol(W)
S <- SE <- T <- P <- matrix(0,nrow=m,ncol=nt)
rownames(S) <- rownames(SE) <- rownames(T) <- rownames(P) <- colnames(W)
colnames(S) <- colnames(SE) <- colnames(T) <- colnames(P) <- colnames(y)
rws <- 1:m
Wy <- crossprod(W,y)
wwadj <- matrix((crossprod(W,ones)**2)/colSums(ones),nrow=m,ncol=nt,byrow=TRUE)
W2 <- W**2
ww <- crossprod(W2,ones)
yy <- matrix(colSums((y**2)*ones),nrow=m,ncol=nt,byrow=TRUE)
sse <- yy-(Wy**2)/ww
sse[is.na(sse)] <- 0
coef <- Wy*(1/ww)
coef[is.na(coef)] <- 0
dfe <- colSums(ones)-2
dfe <- matrix(dfe,nrow=m,ncol=nt,byrow=TRUE)
se <- sqrt(sse/dfe)/sqrt(ww)
tt <- coef/se
ptt <- 2*pt(-abs(tt),df=dfe)
S[rws,] <- coef
SE[rws,] <- se
T[rws,] <- tt
P[rws,] <- ptt
lma <- function( y=NULL, X=NULL, W=NULL, Wlist=NULL, validate=NULL, ids=NULL, rsids=NULL, blocks=NULL) {
yobs <- y <- as.matrix(y)
if(!is.null(validate)) y <- apply(validate,2,function(x) { y[x] <- NA; y })
nt <- ncol(y)
ones <- matrix(1,nrow=nrow(y),ncol=nt)
ones[is.na(y)] <- 0
y[is.na(y)] <- 0
y <- y[rownames(W),]
m <- ncol(W)
S <- SE <- T <- P <- matrix(0,nrow=m,ncol=nt)
rownames(S) <- rownames(SE) <- rownames(T) <- rownames(P) <- colnames(W)
colnames(S) <- colnames(SE) <- colnames(T) <- colnames(P) <- colnames(y)
rws <- 1:m
Wy <- crossprod(W,y)
wwadj <- matrix((crossprod(W,ones)**2)/colSums(ones),nrow=m,ncol=nt,byrow=TRUE)
W2 <- W**2
ww <- crossprod(W2,ones)
yy <- matrix(colSums((y**2)*ones),nrow=m,ncol=nt,byrow=TRUE)
sse <- yy-(Wy**2)/ww
sse[is.na(sse)] <- 0
coef <- Wy*(1/ww)
coef[is.na(coef)] <- 0
dfe <- colSums(ones)-2
dfe <- matrix(dfe,nrow=m,ncol=nt,byrow=TRUE)
se <- sqrt(sse/dfe)/sqrt(ww)
tt <- coef/se
ptt <- 2*pt(-abs(tt),df=dfe)
S[rws,] <- coef
SE[rws,] <- se
T[rws,] <- tt
P[rws,] <- ptt
res <- list(S=S,SE=SE,T=T,P=P)
if(!is.null(validate)) {
y <- yobs
n <- length(y)
pa <- mspe <- intercept <- slope <- r2 <- NULL
for ( k in 1:ncol(validate)) {
v <- validate[, k]
t <- (1:n)[-v]
yv <- y[v]
yvhat <- W[v,]%*%S[,k]
#if(!is.null(X)) yvhat <- yvhat + X[v,]%*%fit$b
r2 <- c(r2, summary(lm(yv ~ yvhat))$r.squared)
pa <- c(pa, cor(yvhat, yv))
mspe <- c(mspe, sum((yvhat - yv)^2)/length(yv))
intercept <- c(intercept, lm(yv ~ yvhat )$coef[1])
slope <- c(slope, lm(yv ~ yvhat)$coef[2])
}
res <- data.frame(Corr=pa, R2=r2, R2NAG=NA, AUC=NA, intercept, slope, MSPE=mspe)
colnames(res)[3] <- "Nagel R2"
}
return(res)
}
fitMA <- lma(y=y, X=X, W=W)
str(fitMA)
lma <- function( y=NULL, X=NULL, W=NULL, Wlist=NULL, validate=NULL, ids=NULL, rsids=NULL, blocks=NULL, return.values=FALSE) {
yobs <- y <- as.matrix(y)
if(!is.null(validate)) y <- apply(validate,2,function(x) { y[x] <- NA; y })
nt <- ncol(y)
ones <- matrix(1,nrow=nrow(y),ncol=nt)
ones[is.na(y)] <- 0
y[is.na(y)] <- 0
y <- y[rownames(W),]
m <- ncol(W)
S <- SE <- T <- P <- matrix(0,nrow=m,ncol=nt)
rownames(S) <- rownames(SE) <- rownames(T) <- rownames(P) <- colnames(W)
colnames(S) <- colnames(SE) <- colnames(T) <- colnames(P) <- colnames(y)
rws <- 1:m
Wy <- crossprod(W,y)
wwadj <- matrix((crossprod(W,ones)**2)/colSums(ones),nrow=m,ncol=nt,byrow=TRUE)
W2 <- W**2
ww <- crossprod(W2,ones)
yy <- matrix(colSums((y**2)*ones),nrow=m,ncol=nt,byrow=TRUE)
sse <- yy-(Wy**2)/ww
sse[is.na(sse)] <- 0
coef <- Wy*(1/ww)
coef[is.na(coef)] <- 0
dfe <- colSums(ones)-2
dfe <- matrix(dfe,nrow=m,ncol=nt,byrow=TRUE)
se <- sqrt(sse/dfe)/sqrt(ww)
tt <- coef/se
ptt <- 2*pt(-abs(tt),df=dfe)
S[rws,] <- coef
SE[rws,] <- se
T[rws,] <- tt
P[rws,] <- ptt
res <- list(S=S,SE=SE,T=T,P=P)
if(!is.null(validate)) {
y <- yobs
n <- length(y)
pa <- mspe <- intercept <- slope <- r2 <- NULL
for ( k in 1:ncol(validate)) {
v <- validate[, k]
t <- (1:n)[-v]
yv <- y[v]
yvhat <- W[v,]%*%S[,k]
#if(!is.null(X)) yvhat <- yvhat + X[v,]%*%fit$b
r2 <- c(r2, summary(lm(yv ~ yvhat))$r.squared)
pa <- c(pa, cor(yvhat, yv))
mspe <- c(mspe, sum((yvhat - yv)^2)/length(yv))
intercept <- c(intercept, lm(yv ~ yvhat )$coef[1])
slope <- c(slope, lm(yv ~ yvhat)$coef[2])
}
res <- data.frame(Corr=pa, R2=r2, R2NAG=NA, AUC=NA, intercept, slope, MSPE=mspe)
colnames(res)[3] <- "Nagel R2"
if(return.values) res <- list(CV=res,S=S,SE=SE,T=T,P=P)
}
return(res)
}
fitMA <- lma(y=y, X=X, W=W)
str(fitLMA)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
# Simulate data
m <- 1000
n <- 5000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
lma <- function( y=NULL, X=NULL, W=NULL, Wlist=NULL, validate=NULL, ids=NULL, rsids=NULL, blocks=NULL, return.values=FALSE) {
yobs <- y <- as.matrix(y)
if(!is.null(validate)) y <- apply(validate,2,function(x) { y[x] <- NA; y })
nt <- ncol(y)
ones <- matrix(1,nrow=nrow(y),ncol=nt)
ones[is.na(y)] <- 0
y[is.na(y)] <- 0
#y <- y[rownames(W),]
m <- ncol(W)
S <- SE <- T <- P <- matrix(0,nrow=m,ncol=nt)
rownames(S) <- rownames(SE) <- rownames(T) <- rownames(P) <- colnames(W)
colnames(S) <- colnames(SE) <- colnames(T) <- colnames(P) <- colnames(y)
rws <- 1:m
Wy <- crossprod(W,y)
wwadj <- matrix((crossprod(W,ones)**2)/colSums(ones),nrow=m,ncol=nt,byrow=TRUE)
W2 <- W**2
ww <- crossprod(W2,ones)
yy <- matrix(colSums((y**2)*ones),nrow=m,ncol=nt,byrow=TRUE)
sse <- yy-(Wy**2)/ww
sse[is.na(sse)] <- 0
coef <- Wy*(1/ww)
coef[is.na(coef)] <- 0
dfe <- colSums(ones)-2
dfe <- matrix(dfe,nrow=m,ncol=nt,byrow=TRUE)
se <- sqrt(sse/dfe)/sqrt(ww)
tt <- coef/se
ptt <- 2*pt(-abs(tt),df=dfe)
S[rws,] <- coef
SE[rws,] <- se
T[rws,] <- tt
P[rws,] <- ptt
res <- list(S=S,SE=SE,T=T,P=P)
if(!is.null(validate)) {
y <- yobs
n <- length(y)
pa <- mspe <- intercept <- slope <- r2 <- NULL
for ( k in 1:ncol(validate)) {
v <- validate[, k]
t <- (1:n)[-v]
yv <- y[v]
yvhat <- W[v,]%*%S[,k]
#if(!is.null(X)) yvhat <- yvhat + X[v,]%*%fit$b
r2 <- c(r2, summary(lm(yv ~ yvhat))$r.squared)
pa <- c(pa, cor(yvhat, yv))
mspe <- c(mspe, sum((yvhat - yv)^2)/length(yv))
intercept <- c(intercept, lm(yv ~ yvhat )$coef[1])
slope <- c(slope, lm(yv ~ yvhat)$coef[2])
}
res <- data.frame(Corr=pa, R2=r2, R2NAG=NA, AUC=NA, intercept, slope, MSPE=mspe)
colnames(res)[3] <- "Nagel R2"
if(return.values) res <- list(CV=res,S=S,SE=SE,T=T,P=P)
}
return(res)
}
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvMA <- lma(y=y, X=X, W=W, validate=validate, return.values=TRUE)
str(cvMA)
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
cvGB
# Simulate data
m <- 1000
n <- 20000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
# Simulate data
m <- 1000
n <- 50000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
# Simulate data
m <- 1000
n <- 1000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
# Simulate data
m <- 10000
n <- 5000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cv
cvGS
# Simulate data
m <- 50000
n <- 5000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
boxplot(cvMA)
boxplot(cvMA)
boxplot(cvMA[,c(1:2,5:6)])
lambda <- Se/(Sg/m)
head(lambda)
lambda <- m*(1-h2)/h2
head(lambda)
lma <- function( y=NULL, X=NULL, W=NULL, Wlist=NULL, validate=NULL, ids=NULL, rsids=NULL, blocks=NULL, return.values=FALSE) {
if(!is.null(X)) y <- residuals(lm(y~X))
yobs <- y <- as.matrix(y)
if(!is.null(validate)) y <- apply(validate,2,function(x) { y[x] <- NA; y })
nt <- ncol(y)
ones <- matrix(1,nrow=nrow(y),ncol=nt)
ones[is.na(y)] <- 0
y[is.na(y)] <- 0
#y <- y[rownames(W),]
m <- ncol(W)
S <- SE <- T <- P <- matrix(0,nrow=m,ncol=nt)
rownames(S) <- rownames(SE) <- rownames(T) <- rownames(P) <- colnames(W)
colnames(S) <- colnames(SE) <- colnames(T) <- colnames(P) <- colnames(y)
rws <- 1:m
Wy <- crossprod(W,y)
wwadj <- matrix((crossprod(W,ones)**2)/colSums(ones),nrow=m,ncol=nt,byrow=TRUE)
W2 <- W**2
ww <- crossprod(W2,ones)
yy <- matrix(colSums((y**2)*ones),nrow=m,ncol=nt,byrow=TRUE)
sse <- yy-(Wy**2)/ww
sse[is.na(sse)] <- 0
coef <- Wy*(1/ww)
coef[is.na(coef)] <- 0
dfe <- colSums(ones)-2
dfe <- matrix(dfe,nrow=m,ncol=nt,byrow=TRUE)
se <- sqrt(sse/dfe)/sqrt(ww)
tt <- coef/se
ptt <- 2*pt(-abs(tt),df=dfe)
S[rws,] <- coef
SE[rws,] <- se
T[rws,] <- tt
P[rws,] <- ptt
res <- list(S=S,SE=SE,T=T,P=P)
if(!is.null(validate)) {
y <- yobs
n <- length(y)
pa <- mspe <- intercept <- slope <- r2 <- NULL
for ( k in 1:ncol(validate)) {
v <- validate[, k]
t <- (1:n)[-v]
yv <- y[v]
yvhat <- W[v,]%*%S[,k]
#if(!is.null(X)) yvhat <- yvhat + X[v,]%*%fit$b
r2 <- c(r2, summary(lm(yv ~ yvhat))$r.squared)
pa <- c(pa, cor(yvhat, yv))
mspe <- c(mspe, sum((yvhat - yv)^2)/length(yv))
intercept <- c(intercept, lm(yv ~ yvhat )$coef[1])
slope <- c(slope, lm(yv ~ yvhat)$coef[2])
}
res <- data.frame(Corr=pa, R2=r2, R2NAG=NA, AUC=NA, intercept, slope, MSPE=mspe)
colnames(res)[3] <- "Nagel R2"
if(return.values) res <- list(CV=res,S=S,SE=SE,T=T,P=P)
}
return(res)
}
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
library(qgg)
library(qgg)
library(devtools)
install_github("psoerensen/qgg")
library(qgg)
# Simulate data
m <- 1000
n <- 2000
W <- matrix(sample(0:2,n*m, replace=TRUE),ncol=m)
W <- scale(W)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
causal <- sample(1:ncol(W),50)
y <- rowSums(W[,causal]) + rnorm(nrow(W),sd=sqrt(50))
X <- model.matrix(y~1)
validate <- replicate( 5, sample(1:n, as.integer(n/10)))
Sg <- 50
Se <- 50
h2 <- Sg/(Sg+Se)
lambda <- Se/(Sg/m)
lambda <- m*(1-h2)/h2
# BLUP using Gauss-Seidel procedure
fitGS <- gsolve( y=y, X=X, W=W, lambda=lambda)
plotGS(fit=fitGS,sets=causal)
cvGS <- gsolve( y=y, X=X, W=W, lambda=lambda, validate=validate )
# Estimate variance components and BLUP using REML
G <- computeG(W=W)
fitGB <- greml(y = y, X = X, G = list(G=G), verbose = TRUE)
cvGB <- greml(y = y, X = X, G = list(G=G), validate = validate)
# Single marker GWAS + PRS
fitMA <- lma(y=y, X=X, W=W)
cvMA <- lma(y=y, X=X, W=W, validate=validate)
cvMA
cvGS
1500*1000000*8
1500*1000000*8/1000000000
